import jwt from 'jsonwebtoken';

const authUser = async (req, res, next) => {
  try {
    // ‚úÖ CORRE√á√ÉO: Verificar m√∫ltiplas fontes de token
    let token = null;

    // 1. Primeiro, tentar pegar token dos cookies (prioridade)
    if (req.cookies && req.cookies.token) {
      token = req.cookies.token;
      console.log('‚úÖ Token encontrado nos cookies');
    }

    // 2. Se n√£o encontrou nos cookies, tentar no header Authorization
    else if (
      req.headers.authorization &&
      req.headers.authorization.startsWith('Bearer ')
    ) {
      token = req.headers.authorization.split(' ')[1];
      console.log('‚úÖ Token encontrado no header Authorization');
    }

    // 3. √öltima tentativa: header x-auth-token (caso use outro padr√£o)
    else if (req.headers['x-auth-token']) {
      token = req.headers['x-auth-token'];
      console.log('‚úÖ Token encontrado no header x-auth-token');
    }

    // Se nenhum token foi encontrado
    if (!token) {
      console.log('‚ùå Nenhum token encontrado');
      console.log('üîç Cookies dispon√≠veis:', Object.keys(req.cookies || {}));
      console.log('üîç Headers de auth:', {
        authorization: req.headers.authorization ? 'presente' : 'ausente',
        'x-auth-token': req.headers['x-auth-token'] ? 'presente' : 'ausente',
      });

      return res.status(401).json({
        success: false,
        message: 'Token n√£o encontrado. Por favor, fa√ßa login.',
      });
    }

    // ‚úÖ Verificar e decodificar o token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    if (!decoded || !decoded.id) {
      console.log('‚ùå Token inv√°lido - sem ID de usu√°rio');
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido. Por favor, fa√ßa login novamente.',
      });
    }

    // ‚úÖ Adicionar userId ao body da requisi√ß√£o
    req.body.userId = decoded.id;

    console.log('‚úÖ Usu√°rio autenticado com sucesso:', decoded.id);

    next();
  } catch (error) {
    console.error('‚ùå Erro de autentica√ß√£o:', error.message);

    // ‚úÖ TRATAMENTO ESPEC√çFICO DE ERROS JWT
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        success: false,
        message: 'Token expirado. Por favor, fa√ßa login novamente.',
      });
    } else if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido. Por favor, fa√ßa login novamente.',
      });
    } else {
      return res.status(500).json({
        success: false,
        message: 'Erro interno de autentica√ß√£o.',
      });
    }
  }
};

export default authUser;
